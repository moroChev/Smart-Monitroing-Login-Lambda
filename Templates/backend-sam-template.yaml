---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Backend for Condition Monitoring Portal Broker

Parameters:
  SpokeNameUpperCase:
    Description: Spoke name (upper case) e.g. WS-00AA
    Type: String
    AllowedPattern: 'WS-[A-Z0-9]{4}'

Resources:
  ExpressApi:
    Type: AWS::Serverless::HttpApi

  ExpressLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../Functions/backend/build
      PackageType: Zip
      Runtime: nodejs14.x
      Handler: lambda.handler
      MemorySize: 1024
      Timeout: 30
      Role: !GetAtt LambdaIamRole.Arn
      Events:
        ProxyApiRoot:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpressApi

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ConditionMonitoring-Lambda-Policy-Checker
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${SpokeNameUpperCase}-pol_PlatformUserBoundary'

  RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:CreateTable"
              - "dynamodb:DescribeTable"
              - "dynamodb:PutItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"
            Resource: !Sub 'arn:aws:dynamodb:*:${AWS::AccountId}:table/condition-monitoring-sessions'
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${SpokeNameUpperCase}-user_PUD_BP'
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${SpokeNameUpperCase}-user_PUD_IBM'
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${SpokeNameUpperCase}-user_PUD_WIPRO'
          - Effect: "Allow"
            Action:
              - "iotsitewise:ListAccessPolicies"
              - "iotsitewise:DescribePortal"
            Resource: !Sub 'arn:aws:iotsitewise:*:${AWS::AccountId}:portal/*'
      Roles:
        - Ref: "LambdaIamRole"

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ExpressLambdaFunction}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ExpressApi}/stages/prod

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Sub https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/

  LambdaFunctionName:
    Description: Name of the Serverless Express Lambda Function
    Value: !Ref ExpressLambdaFunction
